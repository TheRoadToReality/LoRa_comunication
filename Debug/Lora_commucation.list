
Lora_commucation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003674  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080037c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080037c4  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c64  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b40  00000000  00000000  00029cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000710  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163ea  00000000  00000000  0002c860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9fe  00000000  00000000  00042c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e155  00000000  00000000  0004d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024d4  00000000  00000000  000cb7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000cdc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003768 	.word	0x08003768

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003768 	.word	0x08003768

0800014c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 800014c:	b4b0      	push	{r4, r5, r7}
 800014e:	b08f      	sub	sp, #60	; 0x3c
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000154:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000158:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800015a:	2307      	movs	r3, #7
 800015c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000160:	2307      	movs	r3, #7
 8000162:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000166:	2301      	movs	r3, #1
 8000168:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 800016c:	23ff      	movs	r3, #255	; 0xff
 800016e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000172:	2364      	movs	r3, #100	; 0x64
 8000174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000178:	2308      	movs	r3, #8
 800017a:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	461d      	mov	r5, r3
 8000180:	f107 040c 	add.w	r4, r7, #12
 8000184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800018a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800018c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000190:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000194:	6878      	ldr	r0, [r7, #4]
 8000196:	373c      	adds	r7, #60	; 0x3c
 8000198:	46bd      	mov	sp, r7
 800019a:	bcb0      	pop	{r4, r5, r7}
 800019c:	4770      	bx	lr

0800019e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800019e:	b580      	push	{r7, lr}
 80001a0:	b084      	sub	sp, #16
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
 80001a6:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80001a8:	2101      	movs	r1, #1
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f000 f99f 	bl	80004ee <LoRa_read>
 80001b0:	4603      	mov	r3, r0
 80001b2:	73bb      	strb	r3, [r7, #14]
	data = read;
 80001b4:	7bbb      	ldrb	r3, [r7, #14]
 80001b6:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d107      	bne.n	80001ce <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	f023 0307 	bic.w	r3, r3, #7
 80001c4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	61da      	str	r2, [r3, #28]
 80001cc:	e03e      	b.n	800024c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d10c      	bne.n	80001ee <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80001d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001d8:	f023 0307 	bic.w	r3, r3, #7
 80001dc:	b25b      	sxtb	r3, r3
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	b25b      	sxtb	r3, r3
 80001e4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2201      	movs	r2, #1
 80001ea:	61da      	str	r2, [r3, #28]
 80001ec:	e02e      	b.n	800024c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	2b03      	cmp	r3, #3
 80001f2:	d10c      	bne.n	800020e <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80001f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80001f8:	f023 0307 	bic.w	r3, r3, #7
 80001fc:	b25b      	sxtb	r3, r3
 80001fe:	f043 0303 	orr.w	r3, r3, #3
 8000202:	b25b      	sxtb	r3, r3
 8000204:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2203      	movs	r2, #3
 800020a:	61da      	str	r2, [r3, #28]
 800020c:	e01e      	b.n	800024c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b05      	cmp	r3, #5
 8000212:	d10c      	bne.n	800022e <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000218:	f023 0307 	bic.w	r3, r3, #7
 800021c:	b25b      	sxtb	r3, r3
 800021e:	f043 0305 	orr.w	r3, r3, #5
 8000222:	b25b      	sxtb	r3, r3
 8000224:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2205      	movs	r2, #5
 800022a:	61da      	str	r2, [r3, #28]
 800022c:	e00e      	b.n	800024c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	2b06      	cmp	r3, #6
 8000232:	d10b      	bne.n	800024c <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000238:	f023 0307 	bic.w	r3, r3, #7
 800023c:	b25b      	sxtb	r3, r3
 800023e:	f043 0306 	orr.w	r3, r3, #6
 8000242:	b25b      	sxtb	r3, r3
 8000244:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2206      	movs	r2, #6
 800024a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	461a      	mov	r2, r3
 8000250:	2101      	movs	r1, #1
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 f965 	bl	8000522 <LoRa_write>
	//HAL_Delay(10);
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	4613      	mov	r3, r2
 800026e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	6818      	ldr	r0, [r3, #0]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	889b      	ldrh	r3, [r3, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	4619      	mov	r1, r3
 800027c:	f001 fb5a 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	6998      	ldr	r0, [r3, #24]
 8000284:	88fa      	ldrh	r2, [r7, #6]
 8000286:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800028a:	68b9      	ldr	r1, [r7, #8]
 800028c:	f001 fffe 	bl	800228c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000290:	bf00      	nop
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fc03 	bl	8002aa2 <HAL_SPI_GetState>
 800029c:	4603      	mov	r3, r0
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d1f7      	bne.n	8000292 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	6998      	ldr	r0, [r3, #24]
 80002a6:	8b3a      	ldrh	r2, [r7, #24]
 80002a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80002ac:	6839      	ldr	r1, [r7, #0]
 80002ae:	f002 f930 	bl	8002512 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80002b2:	bf00      	nop
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 fbf2 	bl	8002aa2 <HAL_SPI_GetState>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d1f7      	bne.n	80002b4 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	6818      	ldr	r0, [r3, #0]
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	889b      	ldrh	r3, [r3, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	4619      	mov	r1, r3
 80002d0:	f001 fb30 	bl	8001934 <HAL_GPIO_WritePin>
}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	4613      	mov	r3, r2
 80002ea:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	889b      	ldrh	r3, [r3, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	4619      	mov	r1, r3
 80002f8:	f001 fb1c 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	6998      	ldr	r0, [r3, #24]
 8000300:	88fa      	ldrh	r2, [r7, #6]
 8000302:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	f001 ffc0 	bl	800228c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800030c:	bf00      	nop
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fbc5 	bl	8002aa2 <HAL_SPI_GetState>
 8000318:	4603      	mov	r3, r0
 800031a:	2b01      	cmp	r3, #1
 800031c:	d1f7      	bne.n	800030e <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	6998      	ldr	r0, [r3, #24]
 8000322:	8b3a      	ldrh	r2, [r7, #24]
 8000324:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	f001 ffaf 	bl	800228c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800032e:	bf00      	nop
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4618      	mov	r0, r3
 8000336:	f002 fbb4 	bl	8002aa2 <HAL_SPI_GetState>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d1f7      	bne.n	8000330 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	6818      	ldr	r0, [r3, #0]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	889b      	ldrh	r3, [r3, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	f001 faf2 	bl	8001934 <HAL_GPIO_WritePin>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	04db      	lsls	r3, r3, #19
 8000366:	115b      	asrs	r3, r3, #5
 8000368:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	0c1b      	lsrs	r3, r3, #16
 800036e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000370:	7afb      	ldrb	r3, [r7, #11]
 8000372:	461a      	mov	r2, r3
 8000374:	2106      	movs	r1, #6
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f000 f8d3 	bl	8000522 <LoRa_write>
	HAL_Delay(5);
 800037c:	2005      	movs	r0, #5
 800037e:	f000 fe17 	bl	8000fb0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	0a1b      	lsrs	r3, r3, #8
 8000386:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000388:	7afb      	ldrb	r3, [r7, #11]
 800038a:	461a      	mov	r2, r3
 800038c:	2107      	movs	r1, #7
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f000 f8c7 	bl	8000522 <LoRa_write>
	HAL_Delay(5);
 8000394:	2005      	movs	r0, #5
 8000396:	f000 fe0b 	bl	8000fb0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	461a      	mov	r2, r3
 80003a2:	2108      	movs	r1, #8
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f000 f8bc 	bl	8000522 <LoRa_write>
	HAL_Delay(5);
 80003aa:	2005      	movs	r0, #5
 80003ac:	f000 fe00 	bl	8000fb0 <HAL_Delay>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b0c      	cmp	r3, #12
 80003c6:	dd01      	ble.n	80003cc <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80003c8:	230c      	movs	r3, #12
 80003ca:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	2b06      	cmp	r3, #6
 80003d0:	dc01      	bgt.n	80003d6 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80003d2:	2307      	movs	r3, #7
 80003d4:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80003d6:	211e      	movs	r1, #30
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f000 f888 	bl	80004ee <LoRa_read>
 80003de:	4603      	mov	r3, r0
 80003e0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80003e2:	200a      	movs	r0, #10
 80003e4:	f000 fde4 	bl	8000fb0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	011b      	lsls	r3, r3, #4
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	f003 030f 	and.w	r3, r3, #15
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4413      	add	r3, r2
 80003fa:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80003fc:	7bbb      	ldrb	r3, [r7, #14]
 80003fe:	461a      	mov	r2, r3
 8000400:	211e      	movs	r1, #30
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f000 f88d 	bl	8000522 <LoRa_write>
	HAL_Delay(10);
 8000408:	200a      	movs	r0, #10
 800040a:	f000 fdd1 	bl	8000fb0 <HAL_Delay>
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
 800041e:	460b      	mov	r3, r1
 8000420:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000422:	78fb      	ldrb	r3, [r7, #3]
 8000424:	461a      	mov	r2, r3
 8000426:	2109      	movs	r1, #9
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f87a 	bl	8000522 <LoRa_write>
	HAL_Delay(10);
 800042e:	200a      	movs	r0, #10
 8000430:	f000 fdbe 	bl	8000fb0 <HAL_Delay>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b2c      	cmp	r3, #44	; 0x2c
 8000450:	d801      	bhi.n	8000456 <LoRa_setOCP+0x1a>
		current = 45;
 8000452:	232d      	movs	r3, #45	; 0x2d
 8000454:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000456:	78fb      	ldrb	r3, [r7, #3]
 8000458:	2bf0      	cmp	r3, #240	; 0xf0
 800045a:	d901      	bls.n	8000460 <LoRa_setOCP+0x24>
		current = 240;
 800045c:	23f0      	movs	r3, #240	; 0xf0
 800045e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b78      	cmp	r3, #120	; 0x78
 8000464:	d809      	bhi.n	800047a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	3b2d      	subs	r3, #45	; 0x2d
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <LoRa_setOCP+0x78>)
 800046c:	fb82 1203 	smull	r1, r2, r2, r3
 8000470:	1052      	asrs	r2, r2, #1
 8000472:	17db      	asrs	r3, r3, #31
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	e00b      	b.n	8000492 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800047a:	78fb      	ldrb	r3, [r7, #3]
 800047c:	2bf0      	cmp	r3, #240	; 0xf0
 800047e:	d808      	bhi.n	8000492 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	331e      	adds	r3, #30
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <LoRa_setOCP+0x78>)
 8000486:	fb82 1203 	smull	r1, r2, r2, r3
 800048a:	1092      	asrs	r2, r2, #2
 800048c:	17db      	asrs	r3, r3, #31
 800048e:	1ad3      	subs	r3, r2, r3
 8000490:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	3320      	adds	r3, #32
 8000496:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	461a      	mov	r2, r3
 800049c:	210b      	movs	r1, #11
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f000 f83f 	bl	8000522 <LoRa_write>
	HAL_Delay(10);
 80004a4:	200a      	movs	r0, #10
 80004a6:	f000 fd83 	bl	8000fb0 <HAL_Delay>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	66666667 	.word	0x66666667

080004b8 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80004c0:	211e      	movs	r1, #30
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 f813 	bl	80004ee <LoRa_read>
 80004c8:	4603      	mov	r3, r0
 80004ca:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	f043 0307 	orr.w	r3, r3, #7
 80004d2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80004d4:	7bbb      	ldrb	r3, [r7, #14]
 80004d6:	461a      	mov	r2, r3
 80004d8:	211e      	movs	r1, #30
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f821 	bl	8000522 <LoRa_write>
	HAL_Delay(10);
 80004e0:	200a      	movs	r0, #10
 80004e2:	f000 fd65 	bl	8000fb0 <HAL_Delay>
}
 80004e6:	bf00      	nop
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af02      	add	r7, sp, #8
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	460b      	mov	r3, r1
 80004f8:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80004fa:	78fb      	ldrb	r3, [r7, #3]
 80004fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000500:	b2db      	uxtb	r3, r3
 8000502:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000504:	f107 030f 	add.w	r3, r7, #15
 8000508:	f107 010e 	add.w	r1, r7, #14
 800050c:	2201      	movs	r2, #1
 800050e:	9200      	str	r2, [sp, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff fea4 	bl	8000260 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af02      	add	r7, sp, #8
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	70fb      	strb	r3, [r7, #3]
 800052e:	4613      	mov	r3, r2
 8000530:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000538:	b2db      	uxtb	r3, r3
 800053a:	73bb      	strb	r3, [r7, #14]
	data = value;
 800053c:	78bb      	ldrb	r3, [r7, #2]
 800053e:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000540:	f107 030f 	add.w	r3, r7, #15
 8000544:	f107 010e 	add.w	r1, r7, #14
 8000548:	2201      	movs	r2, #1
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	2201      	movs	r2, #1
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f7ff fec4 	bl	80002dc <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	461a      	mov	r2, r3
 8000568:	460b      	mov	r3, r1
 800056a:	72fb      	strb	r3, [r7, #11]
 800056c:	4613      	mov	r3, r2
 800056e:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000570:	7afb      	ldrb	r3, [r7, #11]
 8000572:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000576:	b2db      	uxtb	r3, r3
 8000578:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	889b      	ldrh	r3, [r3, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f001 f9d5 	bl	8001934 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6998      	ldr	r0, [r3, #24]
 800058e:	f107 0117 	add.w	r1, r7, #23
 8000592:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000596:	2201      	movs	r2, #1
 8000598:	f001 fe78 	bl	800228c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800059c:	bf00      	nop
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fa7d 	bl	8002aa2 <HAL_SPI_GetState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f7      	bne.n	800059e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6998      	ldr	r0, [r3, #24]
 80005b2:	7abb      	ldrb	r3, [r7, #10]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f001 fe66 	bl	800228c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80005c0:	bf00      	nop
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fa6b 	bl	8002aa2 <HAL_SPI_GetState>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1f7      	bne.n	80005c2 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	889b      	ldrh	r3, [r3, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f9a9 	bl	8001934 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]

	return 1;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	4611      	mov	r1, r2
 800060a:	461a      	mov	r2, r3
 800060c:	460b      	mov	r3, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800061a:	2101      	movs	r1, #1
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f7ff fdbe 	bl	800019e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000622:	210e      	movs	r1, #14
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f7ff ff62 	bl	80004ee <LoRa_read>
 800062a:	4603      	mov	r3, r0
 800062c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800062e:	7cfb      	ldrb	r3, [r7, #19]
 8000630:	461a      	mov	r2, r3
 8000632:	210d      	movs	r1, #13
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	f7ff ff74 	bl	8000522 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	461a      	mov	r2, r3
 800063e:	2122      	movs	r1, #34	; 0x22
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f7ff ff6e 	bl	8000522 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	2100      	movs	r1, #0
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f7ff ff85 	bl	800055c <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000652:	2103      	movs	r1, #3
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f7ff fda2 	bl	800019e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800065a:	2112      	movs	r1, #18
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff46 	bl	80004ee <LoRa_read>
 8000662:	4603      	mov	r3, r0
 8000664:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00a      	beq.n	8000686 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000670:	22ff      	movs	r2, #255	; 0xff
 8000672:	2112      	movs	r1, #18
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f7ff ff54 	bl	8000522 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800067a:	6979      	ldr	r1, [r7, #20]
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff fd8e 	bl	800019e <LoRa_gotoMode>
			return 1;
 8000682:	2301      	movs	r3, #1
 8000684:	e00f      	b.n	80006a6 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	3b01      	subs	r3, #1
 800068a:	80bb      	strh	r3, [r7, #4]
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d105      	bne.n	800069e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000692:	6979      	ldr	r1, [r7, #20]
 8000694:	68f8      	ldr	r0, [r7, #12]
 8000696:	f7ff fd82 	bl	800019e <LoRa_gotoMode>
				return 0;
 800069a:	2300      	movs	r3, #0
 800069c:	e003      	b.n	80006a6 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fc86 	bl	8000fb0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80006a4:	e7d9      	b.n	800065a <LoRa_transmit+0x5c>
	}
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80006b6:	2105      	movs	r1, #5
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff fd70 	bl	800019e <LoRa_gotoMode>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b084      	sub	sp, #16
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff8b 	bl	80005ea <LoRa_isvalid>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	f000 8093 	beq.w	8000802 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80006dc:	2100      	movs	r1, #0
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fd5d 	bl	800019e <LoRa_gotoMode>
			HAL_Delay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 fc63 	bl	8000fb0 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80006ea:	2101      	movs	r1, #1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff fefe 	bl	80004ee <LoRa_read>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80006f6:	200a      	movs	r0, #10
 80006f8:	f000 fc5a 	bl	8000fb0 <HAL_Delay>
			data = read | 0x80;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000702:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000704:	7bbb      	ldrb	r3, [r7, #14]
 8000706:	461a      	mov	r2, r3
 8000708:	2101      	movs	r1, #1
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff09 	bl	8000522 <LoRa_write>
			HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	f000 fc4d 	bl	8000fb0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4619      	mov	r1, r3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fe1b 	bl	8000358 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fe73 	bl	8000416 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000736:	4619      	mov	r1, r3
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fe7f 	bl	800043c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800073e:	2223      	movs	r2, #35	; 0x23
 8000740:	210c      	movs	r1, #12
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff feed 	bl	8000522 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff feb5 	bl	80004b8 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fe2e 	bl	80003b8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	211f      	movs	r1, #31
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fede 	bl	8000522 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000770:	011b      	lsls	r3, r3, #4
 8000772:	b2da      	uxtb	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4413      	add	r3, r2
 8000780:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	461a      	mov	r2, r3
 8000786:	211d      	movs	r1, #29
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff feca 	bl	8000522 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	461a      	mov	r2, r3
 800079a:	2120      	movs	r1, #32
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fec0 	bl	8000522 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	2121      	movs	r1, #33	; 0x21
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff feb8 	bl	8000522 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fe9a 	bl	80004ee <LoRa_read>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80007c4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fea8 	bl	8000522 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fce2 	bl	800019e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fbe5 	bl	8000fb0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80007e6:	2142      	movs	r1, #66	; 0x42
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe80 	bl	80004ee <LoRa_read>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	2b12      	cmp	r3, #18
 80007f6:	d101      	bne.n	80007fc <LoRa_init+0x136>
				return LORA_OK;
 80007f8:	23c8      	movs	r3, #200	; 0xc8
 80007fa:	e004      	b.n	8000806 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80007fc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000800:	e001      	b.n	8000806 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000802:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b5b0      	push	{r4, r5, r7, lr}
 8000812:	b0ac      	sub	sp, #176	; 0xb0
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  myLoRa = newLoRa();
 8000816:	4c3d      	ldr	r4, [pc, #244]	; (800090c <main+0xfc>)
 8000818:	463b      	mov	r3, r7
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fc96 	bl	800014c <newLoRa>
 8000820:	4625      	mov	r5, r4
 8000822:	463c      	mov	r4, r7
 8000824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800082a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800082c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000830:	e885 0007 	stmia.w	r5, {r0, r1, r2}
/* USER CODE END 0 */

  myLoRa = newLoRa();
 8000834:	4c35      	ldr	r4, [pc, #212]	; (800090c <main+0xfc>)
 8000836:	463b      	mov	r3, r7
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fc87 	bl	800014c <newLoRa>
 800083e:	4625      	mov	r5, r4
 8000840:	463c      	mov	r4, r7
 8000842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800084e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myLoRa.CS_port         = NSS_GPIO_Port;
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <main+0xfc>)
 8000854:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <main+0x100>)
 8000856:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <main+0xfc>)
 800085a:	2201      	movs	r2, #1
 800085c:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <main+0xfc>)
 8000860:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <main+0x100>)
 8000862:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <main+0xfc>)
 8000866:	2202      	movs	r2, #2
 8000868:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <main+0xfc>)
 800086c:	4a28      	ldr	r2, [pc, #160]	; (8000910 <main+0x100>)
 800086e:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO0_Pin;
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <main+0xfc>)
 8000872:	2204      	movs	r2, #4
 8000874:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <main+0xfc>)
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <main+0x104>)
 800087a:	619a      	str	r2, [r3, #24]
  myLoRa.frequency             = 440;							  // default = 433 MHz
 800087c:	4b23      	ldr	r3, [pc, #140]	; (800090c <main+0xfc>)
 800087e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000882:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <main+0xfc>)
 8000886:	2207      	movs	r2, #7
 8000888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  myLoRa.bandWidth			       = BW_31_25KHz;				  // default = BW_125KHz
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <main+0xfc>)
 800088e:	2204      	movs	r2, #4
 8000890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <main+0xfc>)
 8000896:	2201      	movs	r2, #1
 8000898:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  myLoRa.power					       = POWER_20db;				// default = 20db
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <main+0xfc>)
 800089e:	22ff      	movs	r2, #255	; 0xff
 80008a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  myLoRa.overCurrentProtection = 130; 							// default = 100 mA
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <main+0xfc>)
 80008a6:	2282      	movs	r2, #130	; 0x82
 80008a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  myLoRa.preamble				       = 9;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <main+0xfc>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	851a      	strh	r2, [r3, #40]	; 0x28
  /* MCU Configuration--------------------------------------------------------*/
  if(LoRa_init(&myLoRa) == LORA_OK){
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <main+0xfc>)
 80008b4:	f7ff ff07 	bl	80006c6 <LoRa_init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2bc8      	cmp	r3, #200	; 0xc8
 80008bc:	d102      	bne.n	80008c4 <main+0xb4>
	  LoRa_stat = 1;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <main+0x108>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
  }
  LoRa_startReceiving(&myLoRa);
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <main+0xfc>)
 80008c6:	f7ff fef2 	bl	80006ae <LoRa_startReceiving>
  uint8_t TxBuffer[128];
  TxBuffer[0] = 45;
 80008ca:	232d      	movs	r3, #45	; 0x2d
 80008cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  TxBuffer[1] = 0x12;
 80008d0:	2312      	movs	r3, #18
 80008d2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  TxBuffer[2] = "G";
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <main+0x10c>)
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  LoRa_transmit(&myLoRa,TxBuffer,3,500);
 80008de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008e6:	2203      	movs	r2, #3
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <main+0xfc>)
 80008ea:	f7ff fe88 	bl	80005fe <LoRa_transmit>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fafd 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f815 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 f901 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 80008fa:	f000 f8e1 	bl	8000ac0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008fe:	f000 f88b 	bl	8000a18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000902:	f000 f8b3 	bl	8000a6c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000906:	f000 f851 	bl	80009ac <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800090a:	e7fe      	b.n	800090a <main+0xfa>
 800090c:	20000154 	.word	0x20000154
 8000910:	40010c00 	.word	0x40010c00
 8000914:	20000028 	.word	0x20000028
 8000918:	20000180 	.word	0x20000180
 800091c:	08003780 	.word	0x08003780

08000920 <SystemClock_Config>:
	if(GPIO_Pin == myLoRa.DIO0_pin){
		LoRa_receice(&myLoRa,RxBuffer,128);
	}
}
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b090      	sub	sp, #64	; 0x40
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	2228      	movs	r2, #40	; 0x28
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f002 feee 	bl	8003710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	2301      	movs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000954:	2302      	movs	r3, #2
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800095e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fffb 	bl	8001964 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000974:	f000 f91a 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2302      	movs	r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2102      	movs	r1, #2
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fa68 	bl	8001e68 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800099e:	f000 f905 	bl	8000bac <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3740      	adds	r7, #64	; 0x40
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <MX_SPI1_Init+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009e0:	2210      	movs	r2, #16
 80009e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009f8:	220a      	movs	r2, #10
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_SPI1_Init+0x64>)
 80009fe:	f001 fbc1 	bl	8002184 <HAL_SPI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a08:	f000 f8d0 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000028 	.word	0x20000028
 8000a14:	40013000 	.word	0x40013000

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART1_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f002 f92c 	bl	8002cac <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f8a7 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000080 	.word	0x20000080
 8000a68:	40013800 	.word	0x40013800

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART2_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f002 f902 	bl	8002cac <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f000 f87d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000c8 	.word	0x200000c8
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <MX_DMA_Init+0x38>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6153      	str	r3, [r2, #20]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2010      	movs	r0, #16
 8000ae4:	f000 fb5f 	bl	80011a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ae8:	2010      	movs	r0, #16
 8000aea:	f000 fb78 	bl	80011de <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_GPIO_Init+0xa4>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b5e:	f000 fee9 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8000b62:	2303      	movs	r3, #3
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b7a:	f000 fd5f 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_GPIO_Init+0xac>)
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_GPIO_Init+0xa8>)
 8000b92:	f000 fd53 	bl	800163c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	10110000 	.word	0x10110000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x5c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x60>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_MspInit+0x60>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000

08000c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1b      	ldr	r2, [pc, #108]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d12f      	bne.n	8000c9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c6c:	23b0      	movs	r3, #176	; 0xb0
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c80:	f000 fcdc 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_SPI_MspInit+0x90>)
 8000c98:	f000 fcd0 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40013000 	.word	0x40013000
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <HAL_UART_MspInit+0x154>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d132      	bne.n	8000d36 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a46      	ldr	r2, [pc, #280]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	4619      	mov	r1, r3
 8000d14:	483d      	ldr	r0, [pc, #244]	; (8000e0c <HAL_UART_MspInit+0x15c>)
 8000d16:	f000 fc91 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4837      	ldr	r0, [pc, #220]	; (8000e0c <HAL_UART_MspInit+0x15c>)
 8000d30:	f000 fc84 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d34:	e062      	b.n	8000dfc <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <HAL_UART_MspInit+0x160>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d15d      	bne.n	8000dfc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	61d3      	str	r3, [r2, #28]
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a2a      	ldr	r2, [pc, #168]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <HAL_UART_MspInit+0x158>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d70:	2304      	movs	r3, #4
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4822      	ldr	r0, [pc, #136]	; (8000e0c <HAL_UART_MspInit+0x15c>)
 8000d84:	f000 fc5a 	bl	800163c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481c      	ldr	r0, [pc, #112]	; (8000e0c <HAL_UART_MspInit+0x15c>)
 8000d9c:	f000 fc4e 	bl	800163c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_UART_MspInit+0x168>)
 8000da4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dd0:	4810      	ldr	r0, [pc, #64]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000dd2:	f000 fa1f 	bl	8001214 <HAL_DMA_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000ddc:	f7ff fee6 	bl	8000bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_UART_MspInit+0x164>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2026      	movs	r0, #38	; 0x26
 8000df2:	f000 f9d8 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df6:	2026      	movs	r0, #38	; 0x26
 8000df8:	f000 f9f1 	bl	80011de <HAL_NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40004400 	.word	0x40004400
 8000e14:	20000110 	.word	0x20000110
 8000e18:	4002006c 	.word	0x4002006c

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f889 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA1_Channel6_IRQHandler+0x10>)
 8000e72:	f000 fadd 	bl	8001430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000110 	.word	0x20000110

08000e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <USART2_IRQHandler+0x10>)
 8000e86:	f001 ff61 	bl	8002d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000c8 	.word	0x200000c8

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff fff8 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ea6:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ebc:	4c09      	ldr	r4, [pc, #36]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fc29 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff fc9f 	bl	8000810 <main>
  bx lr
 8000ed2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000edc:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee4:	20000188 	.word	0x20000188

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f947 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fe56 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f95f 	bl	80011fa <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f927 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000184 	.word	0x20000184

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	; (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000184 	.word	0x20000184

08000fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb8:	f7ff fff0 	bl	8000f9c <HAL_GetTick>
 8000fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc8:	d005      	beq.n	8000fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_Delay+0x44>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd6:	bf00      	nop
 8000fd8:	f7ff ffe0 	bl	8000f9c <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8f7      	bhi.n	8000fd8 <HAL_Delay+0x28>
  {
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4906      	ldr	r1, [pc, #24]	; (8001090 <__NVIC_EnableIRQ+0x34>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff90 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff2d 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff42 	bl	8001040 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff35 	bl	800105c <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e043      	b.n	80012b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_DMA_Init+0xa8>)
 8001232:	4413      	add	r3, r2
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <HAL_DMA_Init+0xac>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	009a      	lsls	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_DMA_Init+0xb0>)
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800125e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001262:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	bffdfff8 	.word	0xbffdfff8
 80012c0:	cccccccd 	.word	0xcccccccd
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d008      	beq.n	80012f2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e020      	b.n	8001334 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 020e 	bic.w	r2, r2, #14
 8001300:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
	...

08001340 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d005      	beq.n	8001364 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2204      	movs	r2, #4
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e051      	b.n	8001408 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 020e 	bic.w	r2, r2, #14
 8001372:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <HAL_DMA_Abort_IT+0xd4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d029      	beq.n	80013e2 <HAL_DMA_Abort_IT+0xa2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <HAL_DMA_Abort_IT+0xd8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d022      	beq.n	80013de <HAL_DMA_Abort_IT+0x9e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_DMA_Abort_IT+0xdc>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01a      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x98>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_DMA_Abort_IT+0xe0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d012      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x92>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_DMA_Abort_IT+0xe4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00a      	beq.n	80013cc <HAL_DMA_Abort_IT+0x8c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_DMA_Abort_IT+0xe8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d102      	bne.n	80013c6 <HAL_DMA_Abort_IT+0x86>
 80013c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c4:	e00e      	b.n	80013e4 <HAL_DMA_Abort_IT+0xa4>
 80013c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ca:	e00b      	b.n	80013e4 <HAL_DMA_Abort_IT+0xa4>
 80013cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d0:	e008      	b.n	80013e4 <HAL_DMA_Abort_IT+0xa4>
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	e005      	b.n	80013e4 <HAL_DMA_Abort_IT+0xa4>
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	e002      	b.n	80013e4 <HAL_DMA_Abort_IT+0xa4>
 80013de:	2310      	movs	r3, #16
 80013e0:	e000      	b.n	80013e4 <HAL_DMA_Abort_IT+0xa4>
 80013e2:	2301      	movs	r3, #1
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_DMA_Abort_IT+0xec>)
 80013e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	4798      	blx	r3
    } 
  }
  return status;
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020008 	.word	0x40020008
 8001418:	4002001c 	.word	0x4002001c
 800141c:	40020030 	.word	0x40020030
 8001420:	40020044 	.word	0x40020044
 8001424:	40020058 	.word	0x40020058
 8001428:	4002006c 	.word	0x4002006c
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	2204      	movs	r2, #4
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d04f      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xc8>
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b00      	cmp	r3, #0
 8001460:	d04a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0204 	bic.w	r2, r2, #4
 800147e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a66      	ldr	r2, [pc, #408]	; (8001620 <HAL_DMA_IRQHandler+0x1f0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d029      	beq.n	80014de <HAL_DMA_IRQHandler+0xae>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_DMA_IRQHandler+0x1f4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d022      	beq.n	80014da <HAL_DMA_IRQHandler+0xaa>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a63      	ldr	r2, [pc, #396]	; (8001628 <HAL_DMA_IRQHandler+0x1f8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xa4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a62      	ldr	r2, [pc, #392]	; (800162c <HAL_DMA_IRQHandler+0x1fc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d012      	beq.n	80014ce <HAL_DMA_IRQHandler+0x9e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a60      	ldr	r2, [pc, #384]	; (8001630 <HAL_DMA_IRQHandler+0x200>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x98>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a5f      	ldr	r2, [pc, #380]	; (8001634 <HAL_DMA_IRQHandler+0x204>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d102      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x92>
 80014bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c0:	e00e      	b.n	80014e0 <HAL_DMA_IRQHandler+0xb0>
 80014c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014c6:	e00b      	b.n	80014e0 <HAL_DMA_IRQHandler+0xb0>
 80014c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014cc:	e008      	b.n	80014e0 <HAL_DMA_IRQHandler+0xb0>
 80014ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014d2:	e005      	b.n	80014e0 <HAL_DMA_IRQHandler+0xb0>
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d8:	e002      	b.n	80014e0 <HAL_DMA_IRQHandler+0xb0>
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	e000      	b.n	80014e0 <HAL_DMA_IRQHandler+0xb0>
 80014de:	2304      	movs	r3, #4
 80014e0:	4a55      	ldr	r2, [pc, #340]	; (8001638 <HAL_DMA_IRQHandler+0x208>)
 80014e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8094 	beq.w	8001616 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014f6:	e08e      	b.n	8001616 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	2202      	movs	r2, #2
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d056      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x186>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d051      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 020a 	bic.w	r2, r2, #10
 800152e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a38      	ldr	r2, [pc, #224]	; (8001620 <HAL_DMA_IRQHandler+0x1f0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d029      	beq.n	8001596 <HAL_DMA_IRQHandler+0x166>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_DMA_IRQHandler+0x1f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <HAL_DMA_IRQHandler+0x162>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a35      	ldr	r2, [pc, #212]	; (8001628 <HAL_DMA_IRQHandler+0x1f8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01a      	beq.n	800158c <HAL_DMA_IRQHandler+0x15c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <HAL_DMA_IRQHandler+0x1fc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d012      	beq.n	8001586 <HAL_DMA_IRQHandler+0x156>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a32      	ldr	r2, [pc, #200]	; (8001630 <HAL_DMA_IRQHandler+0x200>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00a      	beq.n	8001580 <HAL_DMA_IRQHandler+0x150>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a31      	ldr	r2, [pc, #196]	; (8001634 <HAL_DMA_IRQHandler+0x204>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d102      	bne.n	800157a <HAL_DMA_IRQHandler+0x14a>
 8001574:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001578:	e00e      	b.n	8001598 <HAL_DMA_IRQHandler+0x168>
 800157a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157e:	e00b      	b.n	8001598 <HAL_DMA_IRQHandler+0x168>
 8001580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001584:	e008      	b.n	8001598 <HAL_DMA_IRQHandler+0x168>
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	e005      	b.n	8001598 <HAL_DMA_IRQHandler+0x168>
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	e002      	b.n	8001598 <HAL_DMA_IRQHandler+0x168>
 8001592:	2320      	movs	r3, #32
 8001594:	e000      	b.n	8001598 <HAL_DMA_IRQHandler+0x168>
 8001596:	2302      	movs	r3, #2
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_DMA_IRQHandler+0x208>)
 800159a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d034      	beq.n	8001616 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015b4:	e02f      	b.n	8001616 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2208      	movs	r2, #8
 80015bc:	409a      	lsls	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d028      	beq.n	8001618 <HAL_DMA_IRQHandler+0x1e8>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d023      	beq.n	8001618 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020e 	bic.w	r2, r2, #14
 80015de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	2101      	movs	r1, #1
 80015ea:	fa01 f202 	lsl.w	r2, r1, r2
 80015ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
    }
  }
  return;
 8001616:	bf00      	nop
 8001618:	bf00      	nop
}
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020008 	.word	0x40020008
 8001624:	4002001c 	.word	0x4002001c
 8001628:	40020030 	.word	0x40020030
 800162c:	40020044 	.word	0x40020044
 8001630:	40020058 	.word	0x40020058
 8001634:	4002006c 	.word	0x4002006c
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e161      	b.n	8001914 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001650:	2201      	movs	r2, #1
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8150 	bne.w	800190e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a97      	ldr	r2, [pc, #604]	; (80018d0 <HAL_GPIO_Init+0x294>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d05e      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001678:	4a95      	ldr	r2, [pc, #596]	; (80018d0 <HAL_GPIO_Init+0x294>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d875      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800167e:	4a95      	ldr	r2, [pc, #596]	; (80018d4 <HAL_GPIO_Init+0x298>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d058      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001684:	4a93      	ldr	r2, [pc, #588]	; (80018d4 <HAL_GPIO_Init+0x298>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d86f      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800168a:	4a93      	ldr	r2, [pc, #588]	; (80018d8 <HAL_GPIO_Init+0x29c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d052      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001690:	4a91      	ldr	r2, [pc, #580]	; (80018d8 <HAL_GPIO_Init+0x29c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d869      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 8001696:	4a91      	ldr	r2, [pc, #580]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d04c      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 800169c:	4a8f      	ldr	r2, [pc, #572]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d863      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016a2:	4a8f      	ldr	r2, [pc, #572]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d046      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 80016a8:	4a8d      	ldr	r2, [pc, #564]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d85d      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d82a      	bhi.n	8001708 <HAL_GPIO_Init+0xcc>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d859      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_GPIO_Init+0x80>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001711 	.word	0x08001711
 80016c4:	08001723 	.word	0x08001723
 80016c8:	08001765 	.word	0x08001765
 80016cc:	0800176b 	.word	0x0800176b
 80016d0:	0800176b 	.word	0x0800176b
 80016d4:	0800176b 	.word	0x0800176b
 80016d8:	0800176b 	.word	0x0800176b
 80016dc:	0800176b 	.word	0x0800176b
 80016e0:	0800176b 	.word	0x0800176b
 80016e4:	0800176b 	.word	0x0800176b
 80016e8:	0800176b 	.word	0x0800176b
 80016ec:	0800176b 	.word	0x0800176b
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	0800176b 	.word	0x0800176b
 80016f8:	0800176b 	.word	0x0800176b
 80016fc:	0800176b 	.word	0x0800176b
 8001700:	08001719 	.word	0x08001719
 8001704:	0800172d 	.word	0x0800172d
 8001708:	4a76      	ldr	r2, [pc, #472]	; (80018e4 <HAL_GPIO_Init+0x2a8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800170e:	e02c      	b.n	800176a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e029      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e024      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	3308      	adds	r3, #8
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e01f      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	330c      	adds	r3, #12
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e01a      	b.n	800176c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173e:	2304      	movs	r3, #4
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e013      	b.n	800176c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	611a      	str	r2, [r3, #16]
          break;
 8001756:	e009      	b.n	800176c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	615a      	str	r2, [r3, #20]
          break;
 8001762:	e003      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x130>
          break;
 800176a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d801      	bhi.n	8001776 <HAL_GPIO_Init+0x13a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e001      	b.n	800177a <HAL_GPIO_Init+0x13e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d802      	bhi.n	8001788 <HAL_GPIO_Init+0x14c>
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x152>
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3b08      	subs	r3, #8
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	210f      	movs	r1, #15
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	6a39      	ldr	r1, [r7, #32]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80a9 	beq.w	800190e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d4:	4a45      	ldr	r2, [pc, #276]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3d      	ldr	r2, [pc, #244]	; (80018f0 <HAL_GPIO_Init+0x2b4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00d      	beq.n	800181c <HAL_GPIO_Init+0x1e0>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d007      	beq.n	8001818 <HAL_GPIO_Init+0x1dc>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a3b      	ldr	r2, [pc, #236]	; (80018f8 <HAL_GPIO_Init+0x2bc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_GPIO_Init+0x1d8>
 8001810:	2302      	movs	r3, #2
 8001812:	e004      	b.n	800181e <HAL_GPIO_Init+0x1e2>
 8001814:	2303      	movs	r3, #3
 8001816:	e002      	b.n	800181e <HAL_GPIO_Init+0x1e2>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_GPIO_Init+0x1e2>
 800181c:	2300      	movs	r3, #0
 800181e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001820:	f002 0203 	and.w	r2, r2, #3
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4093      	lsls	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182e:	492f      	ldr	r1, [pc, #188]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	492b      	ldr	r1, [pc, #172]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001860:	4013      	ands	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4921      	ldr	r1, [pc, #132]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	491d      	ldr	r1, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 8001888:	4013      	ands	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4917      	ldr	r1, [pc, #92]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4913      	ldr	r1, [pc, #76]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01f      	beq.n	8001900 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	490d      	ldr	r1, [pc, #52]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e01f      	b.n	800190e <HAL_GPIO_Init+0x2d2>
 80018ce:	bf00      	nop
 80018d0:	10320000 	.word	0x10320000
 80018d4:	10310000 	.word	0x10310000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	10210000 	.word	0x10210000
 80018e0:	10120000 	.word	0x10120000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <HAL_GPIO_Init+0x2f4>)
 800190a:	4013      	ands	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae96 	bne.w	8001650 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e272      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	d00c      	beq.n	80019aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001990:	4b8f      	ldr	r3, [pc, #572]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
 800199c:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x12c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d168      	bne.n	8001a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e24c      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x76>
 80019cc:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e02e      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x98>
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7a      	ldr	r2, [pc, #488]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xbc>
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a71      	ldr	r2, [pc, #452]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6a      	ldr	r2, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff faac 	bl	8000f9c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff faa8 	bl	8000f9c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e200      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe4>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa98 	bl	8000f9c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fa94 	bl	8000f9c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1ec      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x10c>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1c0      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4939      	ldr	r1, [pc, #228]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fa4d 	bl	8000f9c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fa49 	bl	8000f9c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e1a1      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4927      	ldr	r1, [pc, #156]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fa2c 	bl	8000f9c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fa28 	bl	8000f9c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e180      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d03a      	beq.n	8001be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d019      	beq.n	8001bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa0c 	bl	8000f9c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fa08 	bl	8000f9c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e160      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 face 	bl	8002148 <RCC_Delay>
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f9f2 	bl	8000f9c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f9ee 	bl	8000f9c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d908      	bls.n	8001bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e146      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	42420000 	.word	0x42420000
 8001bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e9      	bne.n	8001bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a6 	beq.w	8001d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10d      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a87      	ldr	r2, [pc, #540]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9af 	bl	8000f9c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9ab 	bl	8000f9c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e103      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <HAL_RCC_OscConfig+0x4c8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x312>
 8001c68:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e02d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x334>
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a69      	ldr	r2, [pc, #420]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a66      	ldr	r2, [pc, #408]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	e01c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x356>
 8001ca0:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a60      	ldr	r2, [pc, #384]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a5d      	ldr	r2, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a57      	ldr	r2, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d015      	beq.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff f95f 	bl	8000f9c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f95b 	bl	8000f9c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0b1      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ee      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x37e>
 8001d04:	e014      	b.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff f949 	bl	8000f9c <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff f945 	bl	8000f9c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e09b      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ee      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a3b      	ldr	r2, [pc, #236]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8087 	beq.w	8001e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d061      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d146      	bne.n	8001dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f919 	bl	8000f9c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff f915 	bl	8000f9c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e06d      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4921      	ldr	r1, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a19      	ldr	r1, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	430b      	orrs	r3, r1
 8001dba:	491b      	ldr	r1, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x4cc>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f8e9 	bl	8000f9c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff f8e5 	bl	8000f9c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e03d      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x46a>
 8001dec:	e035      	b.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff f8d2 	bl	8000f9c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f8ce 	bl	8000f9c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e026      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x498>
 8001e1a:	e01e      	b.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e019      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0d0      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d910      	bls.n	8001eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4965      	ldr	r1, [pc, #404]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0b8      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec4:	4b59      	ldr	r3, [pc, #356]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a58      	ldr	r2, [pc, #352]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	494d      	ldr	r1, [pc, #308]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d040      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07f      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e073      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e06b      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4936      	ldr	r1, [pc, #216]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f58:	f7ff f820 	bl	8000f9c <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7ff f81c 	bl	8000f9c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e053      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d210      	bcs.n	8001fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 0207 	bic.w	r2, r3, #7
 8001f9e:	4922      	ldr	r1, [pc, #136]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e032      	b.n	800201e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4916      	ldr	r1, [pc, #88]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	490e      	ldr	r1, [pc, #56]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff6:	f000 f821 	bl	800203c <HAL_RCC_GetSysClockFreq>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	490a      	ldr	r1, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	5ccb      	ldrb	r3, [r1, r3]
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1cc>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x1d0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe ff7e 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	08003784 	.word	0x08003784
 8002034:	20000000 	.word	0x20000000
 8002038:	20000004 	.word	0x20000004

0800203c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x30>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x36>
 800206a:	e027      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800206e:	613b      	str	r3, [r7, #16]
      break;
 8002070:	e027      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d010      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	0c5b      	lsrs	r3, r3, #17
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800209e:	fb03 f202 	mul.w	r2, r3, r2
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e004      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	613b      	str	r3, [r7, #16]
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020be:	613b      	str	r3, [r7, #16]
      break;
 80020c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c2:	693b      	ldr	r3, [r7, #16]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	007a1200 	.word	0x007a1200
 80020d8:	0800379c 	.word	0x0800379c
 80020dc:	080037ac 	.word	0x080037ac
 80020e0:	003d0900 	.word	0x003d0900

080020e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b02      	ldr	r3, [pc, #8]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020fc:	f7ff fff2 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	08003794 	.word	0x08003794

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002124:	f7ff ffde 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0adb      	lsrs	r3, r3, #11
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08003794 	.word	0x08003794

08002148 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <RCC_Delay+0x34>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <RCC_Delay+0x38>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a5b      	lsrs	r3, r3, #9
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002164:	bf00      	nop
  }
  while (Delay --);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	60fa      	str	r2, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f9      	bne.n	8002164 <RCC_Delay+0x1c>
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	20000000 	.word	0x20000000
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e076      	b.n	8002284 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021a6:	d009      	beq.n	80021bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
 80021ae:	e005      	b.n	80021bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fd20 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	ea42 0103 	orr.w	r1, r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	0c1a      	lsrs	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f002 0204 	and.w	r2, r2, #4
 8002262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_SPI_Transmit+0x22>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e12d      	b.n	800250a <HAL_SPI_Transmit+0x27e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b6:	f7fe fe71 	bl	8000f9c <HAL_GetTick>
 80022ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022d0:	e116      	b.n	8002500 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_SPI_Transmit+0x52>
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022e2:	e10d      	b.n	8002500 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2203      	movs	r2, #3
 80022e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800232a:	d10f      	bne.n	800234c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800233a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d007      	beq.n	800236a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002372:	d14f      	bne.n	8002414 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_Transmit+0xf6>
 800237c:	8afb      	ldrh	r3, [r7, #22]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d142      	bne.n	8002408 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	1c9a      	adds	r2, r3, #2
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023a6:	e02f      	b.n	8002408 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d112      	bne.n	80023dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80023da:	e015      	b.n	8002408 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023dc:	f7fe fdde 	bl	8000f9c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d803      	bhi.n	80023f4 <HAL_SPI_Transmit+0x168>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d102      	bne.n	80023fa <HAL_SPI_Transmit+0x16e>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002406:	e07b      	b.n	8002500 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ca      	bne.n	80023a8 <HAL_SPI_Transmit+0x11c>
 8002412:	e050      	b.n	80024b6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_SPI_Transmit+0x196>
 800241c:	8afb      	ldrh	r3, [r7, #22]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d144      	bne.n	80024ac <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002448:	e030      	b.n	80024ac <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d113      	bne.n	8002480 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	86da      	strh	r2, [r3, #54]	; 0x36
 800247e:	e015      	b.n	80024ac <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002480:	f7fe fd8c 	bl	8000f9c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d803      	bhi.n	8002498 <HAL_SPI_Transmit+0x20c>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d102      	bne.n	800249e <HAL_SPI_Transmit+0x212>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024aa:	e029      	b.n	8002500 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1c9      	bne.n	800244a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fbd8 	bl	8002c70 <SPI_EndRxTxTransaction>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	77fb      	strb	r3, [r7, #31]
 80024f6:	e003      	b.n	8002500 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002508:	7ffb      	ldrb	r3, [r7, #31]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b088      	sub	sp, #32
 8002516:	af02      	add	r7, sp, #8
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002536:	e0fb      	b.n	8002730 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002540:	d112      	bne.n	8002568 <HAL_SPI_Receive+0x56>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2204      	movs	r2, #4
 800254e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8ef 	bl	8002742 <HAL_SPI_TransmitReceive>
 8002564:	4603      	mov	r3, r0
 8002566:	e0e8      	b.n	800273a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_SPI_Receive+0x64>
 8002572:	2302      	movs	r3, #2
 8002574:	e0e1      	b.n	800273a <HAL_SPI_Receive+0x228>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800257e:	f7fe fd0d 	bl	8000f9c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_SPI_Receive+0x7e>
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002594:	e0cc      	b.n	8002730 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2204      	movs	r2, #4
 800259a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	d10f      	bne.n	80025fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d007      	beq.n	800261c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d16a      	bne.n	80026fa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002624:	e032      	b.n	800268c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d115      	bne.n	8002660 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f103 020c 	add.w	r2, r3, #12
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800265e:	e015      	b.n	800268c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002660:	f7fe fc9c 	bl	8000f9c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d803      	bhi.n	8002678 <HAL_SPI_Receive+0x166>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d102      	bne.n	800267e <HAL_SPI_Receive+0x16c>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800268a:	e051      	b.n	8002730 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1c7      	bne.n	8002626 <HAL_SPI_Receive+0x114>
 8002696:	e035      	b.n	8002704 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d113      	bne.n	80026ce <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	b292      	uxth	r2, r2
 80026b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	1c9a      	adds	r2, r3, #2
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026cc:	e015      	b.n	80026fa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ce:	f7fe fc65 	bl	8000f9c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d803      	bhi.n	80026e6 <HAL_SPI_Receive+0x1d4>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d102      	bne.n	80026ec <HAL_SPI_Receive+0x1da>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026f8:	e01a      	b.n	8002730 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1c9      	bne.n	8002698 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fa5f 	bl	8002bcc <SPI_EndRxTransaction>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e003      	b.n	8002730 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002738:	7dfb      	ldrb	r3, [r7, #23]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b08c      	sub	sp, #48	; 0x30
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x26>
 8002764:	2302      	movs	r3, #2
 8002766:	e198      	b.n	8002a9a <HAL_SPI_TransmitReceive+0x358>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002770:	f7fe fc14 	bl	8000f9c <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800277c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800278a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800278e:	2b01      	cmp	r3, #1
 8002790:	d00f      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x70>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002798:	d107      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_SPI_TransmitReceive+0x68>
 80027a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d003      	beq.n	80027b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027b0:	e16d      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x82>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0x82>
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027ca:	e160      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d003      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2205      	movs	r2, #5
 80027dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	887a      	ldrh	r2, [r7, #2]
 80027f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	887a      	ldrh	r2, [r7, #2]
 8002802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d007      	beq.n	8002834 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283c:	d17c      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_SPI_TransmitReceive+0x10a>
 8002846:	8b7b      	ldrh	r3, [r7, #26]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d16a      	bne.n	8002922 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c9a      	adds	r2, r3, #2
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	e057      	b.n	8002922 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11b      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x176>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x176>
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d113      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	1c9a      	adds	r2, r3, #2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d119      	bne.n	80028fa <HAL_SPI_TransmitReceive+0x1b8>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d014      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	b292      	uxth	r2, r2
 80028dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	1c9a      	adds	r2, r3, #2
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028f6:	2301      	movs	r3, #1
 80028f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028fa:	f7fe fb4f 	bl	8000f9c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002906:	429a      	cmp	r2, r3
 8002908:	d80b      	bhi.n	8002922 <HAL_SPI_TransmitReceive+0x1e0>
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d007      	beq.n	8002922 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002920:	e0b5      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1a2      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x130>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d19d      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x130>
 8002936:	e080      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x204>
 8002940:	8b7b      	ldrh	r3, [r7, #26]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d16f      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800296c:	e05b      	b.n	8002a26 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d11c      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x274>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d017      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x274>
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d114      	bne.n	80029b6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d119      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x2b6>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029f8:	f7fe fad0 	bl	8000f9c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d803      	bhi.n	8002a10 <HAL_SPI_TransmitReceive+0x2ce>
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x2d4>
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a24:	e033      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d19e      	bne.n	800296e <HAL_SPI_TransmitReceive+0x22c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d199      	bne.n	800296e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f916 	bl	8002c70 <SPI_EndRxTxTransaction>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a56:	e01a      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a84:	e003      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3730      	adds	r7, #48	; 0x30
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab0:	b2db      	uxtb	r3, r3
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002acc:	f7fe fa66 	bl	8000f9c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002adc:	f7fe fa5e 	bl	8000f9c <HAL_GetTick>
 8002ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	0d1b      	lsrs	r3, r3, #20
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af2:	e054      	b.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d050      	beq.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002afc:	f7fe fa4e 	bl	8000f9c <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d902      	bls.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d13d      	bne.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2a:	d111      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b34:	d004      	beq.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d107      	bne.n	8002b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d10f      	bne.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e017      	b.n	8002bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d19b      	bne.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be0:	d111      	bne.n	8002c06 <SPI_EndRxTransaction+0x3a>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bea:	d004      	beq.n	8002bf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d107      	bne.n	8002c06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c04:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0e:	d117      	bne.n	8002c40 <SPI_EndRxTransaction+0x74>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d112      	bne.n	8002c40 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2101      	movs	r1, #1
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff49 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01a      	beq.n	8002c66 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e013      	b.n	8002c68 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff ff36 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	f043 0220 	orr.w	r2, r3, #32
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e000      	b.n	8002c68 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff ff18 	bl	8002abc <SPI_WaitFlagStateUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e000      	b.n	8002ca4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e042      	b.n	8002d44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fd ffec 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fc7f 	bl	80035f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0ba      	sub	sp, #232	; 0xe8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_UART_IRQHandler+0x66>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fb63 	bl	8003476 <UART_Receive_IT>
      return;
 8002db0:	e25b      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80de 	beq.w	8002f78 <HAL_UART_IRQHandler+0x22c>
 8002dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80d1 	beq.w	8002f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_UART_IRQHandler+0xae>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
 8002e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xf6>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_UART_IRQHandler+0x126>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f043 0208 	orr.w	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 81f2 	beq.w	8003260 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_UART_IRQHandler+0x14e>
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 faee 	bl	8003476 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x17a>
 8002ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04f      	beq.n	8002f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9f8 	bl	80032bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d041      	beq.n	8002f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	4a7e      	ldr	r2, [pc, #504]	; (800312c <HAL_UART_IRQHandler+0x3e0>)
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fa00 	bl	8001340 <HAL_DMA_Abort_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00e      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f99c 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e00a      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f998 	bl	8003294 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e006      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f994 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002f72:	e175      	b.n	8003260 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	bf00      	nop
    return;
 8002f76:	e173      	b.n	8003260 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 814f 	bne.w	8003220 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8148 	beq.w	8003220 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8141 	beq.w	8003220 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80b6 	beq.w	8003130 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8145 	beq.w	8003264 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f080 813e 	bcs.w	8003264 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f000 8088 	beq.w	800310c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003028:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800302c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003034:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1d9      	bne.n	8002ffc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3314      	adds	r3, #20
 8003068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800306c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003070:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003074:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800307e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e1      	bne.n	8003048 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e3      	bne.n	8003084 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030dc:	f023 0310 	bic.w	r3, r3, #16
 80030e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80030f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e3      	bne.n	80030ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f8de 	bl	80012c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311a:	b29b      	uxth	r3, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	b29b      	uxth	r3, r3
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8bf 	bl	80032a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003128:	e09c      	b.n	8003264 <HAL_UART_IRQHandler+0x518>
 800312a:	bf00      	nop
 800312c:	08003381 	.word	0x08003381
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003138:	b29b      	uxth	r3, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 808e 	beq.w	8003268 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800314c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8089 	beq.w	8003268 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330c      	adds	r3, #12
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800316c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800317a:	647a      	str	r2, [r7, #68]	; 0x44
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e3      	bne.n	8003156 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3314      	adds	r3, #20
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	623b      	str	r3, [r7, #32]
   return(result);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031b2:	633a      	str	r2, [r7, #48]	; 0x30
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e3      	bne.n	800318e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0310 	bic.w	r3, r3, #16
 80031ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031f8:	61fa      	str	r2, [r7, #28]
 80031fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	69b9      	ldr	r1, [r7, #24]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	617b      	str	r3, [r7, #20]
   return(result);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e3      	bne.n	80031d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f844 	bl	80032a6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800321e:	e023      	b.n	8003268 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_UART_IRQHandler+0x4f4>
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8b5 	bl	80033a8 <UART_Transmit_IT>
    return;
 800323e:	e014      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <HAL_UART_IRQHandler+0x51e>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8f4 	bl	8003446 <UART_EndTransmit_IT>
    return;
 800325e:	e004      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
    return;
 8003260:	bf00      	nop
 8003262:	e002      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
      return;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
      return;
 8003268:	bf00      	nop
  }
}
 800326a:	37e8      	adds	r7, #232	; 0xe8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032bc:	b480      	push	{r7}
 80032be:	b095      	sub	sp, #84	; 0x54
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e4:	643a      	str	r2, [r7, #64]	; 0x40
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e5      	bne.n	80032c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	61fb      	str	r3, [r7, #28]
   return(result);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3314      	adds	r3, #20
 8003316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e5      	bne.n	80032f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	2b01      	cmp	r3, #1
 8003332:	d119      	bne.n	8003368 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	60bb      	str	r3, [r7, #8]
   return(result);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f023 0310 	bic.w	r3, r3, #16
 800334a:	647b      	str	r3, [r7, #68]	; 0x44
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003354:	61ba      	str	r2, [r7, #24]
 8003356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6979      	ldr	r1, [r7, #20]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	613b      	str	r3, [r7, #16]
   return(result);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e5      	bne.n	8003334 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003376:	bf00      	nop
 8003378:	3754      	adds	r7, #84	; 0x54
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff ff7a 	bl	8003294 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b21      	cmp	r3, #33	; 0x21
 80033ba:	d13e      	bne.n	800343a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d114      	bne.n	80033f0 <UART_Transmit_IT+0x48>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d110      	bne.n	80033f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]
 80033ee:	e008      	b.n	8003402 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	1c59      	adds	r1, r3, #1
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6211      	str	r1, [r2, #32]
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4619      	mov	r1, r3
 8003410:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003424:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003434:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ff02 	bl	8003270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b08c      	sub	sp, #48	; 0x30
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b22      	cmp	r3, #34	; 0x22
 8003488:	f040 80ae 	bne.w	80035e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d117      	bne.n	80034c6 <UART_Receive_IT+0x50>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d113      	bne.n	80034c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
 80034c4:	e026      	b.n	8003514 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d007      	beq.n	80034ea <UART_Receive_IT+0x74>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <UART_Receive_IT+0x82>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e008      	b.n	800350a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003504:	b2da      	uxtb	r2, r3
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003508:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29b      	uxth	r3, r3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4619      	mov	r1, r3
 8003522:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003524:	2b00      	cmp	r3, #0
 8003526:	d15d      	bne.n	80035e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0220 	bic.w	r2, r2, #32
 8003536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	2b01      	cmp	r3, #1
 800356c:	d135      	bne.n	80035da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	613b      	str	r3, [r7, #16]
   return(result);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 0310 	bic.w	r3, r3, #16
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	330c      	adds	r3, #12
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	623a      	str	r2, [r7, #32]
 8003596:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	69f9      	ldr	r1, [r7, #28]
 800359a:	6a3a      	ldr	r2, [r7, #32]
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e5      	bne.n	8003574 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d10a      	bne.n	80035cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fe67 	bl	80032a6 <HAL_UARTEx_RxEventCallback>
 80035d8:	e002      	b.n	80035e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fe51 	bl	8003282 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e002      	b.n	80035ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3730      	adds	r7, #48	; 0x30
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800362e:	f023 030c 	bic.w	r3, r3, #12
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	430b      	orrs	r3, r1
 800363a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <UART_SetConfig+0x114>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800365c:	f7fe fd60 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	e002      	b.n	800366a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003664:	f7fe fd48 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8003668:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <UART_SetConfig+0x118>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	0119      	lsls	r1, r3, #4
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <UART_SetConfig+0x118>)
 80036a2:	fba3 0302 	umull	r0, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2064      	movs	r0, #100	; 0x64
 80036aa:	fb00 f303 	mul.w	r3, r0, r3
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	3332      	adds	r3, #50	; 0x32
 80036b4:	4a15      	ldr	r2, [pc, #84]	; (800370c <UART_SetConfig+0x118>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c0:	4419      	add	r1, r3
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009a      	lsls	r2, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <UART_SetConfig+0x118>)
 80036da:	fba3 0302 	umull	r0, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2064      	movs	r0, #100	; 0x64
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	3332      	adds	r3, #50	; 0x32
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <UART_SetConfig+0x118>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	440a      	add	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40013800 	.word	0x40013800
 800370c:	51eb851f 	.word	0x51eb851f

08003710 <memset>:
 8003710:	4603      	mov	r3, r0
 8003712:	4402      	add	r2, r0
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <memset+0xa>
 8003718:	4770      	bx	lr
 800371a:	f803 1b01 	strb.w	r1, [r3], #1
 800371e:	e7f9      	b.n	8003714 <memset+0x4>

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	2600      	movs	r6, #0
 8003724:	4d0c      	ldr	r5, [pc, #48]	; (8003758 <__libc_init_array+0x38>)
 8003726:	4c0d      	ldr	r4, [pc, #52]	; (800375c <__libc_init_array+0x3c>)
 8003728:	1b64      	subs	r4, r4, r5
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	f000 f81a 	bl	8003768 <_init>
 8003734:	2600      	movs	r6, #0
 8003736:	4d0a      	ldr	r5, [pc, #40]	; (8003760 <__libc_init_array+0x40>)
 8003738:	4c0a      	ldr	r4, [pc, #40]	; (8003764 <__libc_init_array+0x44>)
 800373a:	1b64      	subs	r4, r4, r5
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f855 3b04 	ldr.w	r3, [r5], #4
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080037b0 	.word	0x080037b0
 800375c:	080037b0 	.word	0x080037b0
 8003760:	080037b0 	.word	0x080037b0
 8003764:	080037b4 	.word	0x080037b4

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
